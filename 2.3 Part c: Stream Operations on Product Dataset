import java.util.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.Comparator;

class Product {
    String name;
    double price;
    String category;
    Product(String name, double price, String category) {
        this.name = name; this.price = price; this.category = category;
    }
    @Override
    public String toString() {
        return name + " | " + category + " | " + price;
    }
}

public class ProductStreamOps {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", 60000, "Electronics"),
            new Product("Phone", 30000, "Electronics"),
            new Product("Shirt", 1500, "Clothing"),
            new Product("Jeans", 2500, "Clothing"),
            new Product("Table", 7000, "Furniture"),
            new Product("Chair", 3500, "Furniture"),
            new Product("Headphones", 2000, "Electronics")
        );

        System.out.println("Group by Category:");
        Map<String,List<Product>> grouped = products.stream()
            .collect(Collectors.groupingBy(p->p.category));
        grouped.forEach((cat,list)->{
            System.out.println(cat+": "+list);
        });

        System.out.println("\nMost Expensive Product in Each Category:");
        Map<String,Optional<Product>> maxPrice = products.stream()
            .collect(Collectors.groupingBy(p->p.category,
                Collectors.maxBy(Comparator.comparingDouble(p->p.price))));
        maxPrice.forEach((cat,p)->System.out.println(cat+": "+p.get()));

        System.out.println("\nAverage Price of All Products:");
        double avg = products.stream().collect(Collectors.averagingDouble(p->p.price));
        System.out.println(avg);
    }
}
